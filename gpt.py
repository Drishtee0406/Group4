import torch
import torch.nn as nn
from torch.nn import functional as F
import numpy

#Parameters
batch_size = 4
block_size = 8

#Read file and inspect it
with open ('Ghostship.txt', 'r', encoding = 'utf-8') as f:
    text = f.read()

#Lenght
lenght_text = len(text)

#MILESTONE 1: DATASET EXPLORATION AND PREPARATION

#Unique characters in text input
characters = sorted(list(set(text))) #chars
num_characters = len(characters) #vocab_size
print(f'Unique characters in the text: {''.join(characters)}')
print(f'Number of unique characters in the text: {num_characters}')
print(f'Total number of characters: {lenght_text}')

#Encode and decode
encode0 = {ch:i for i,ch in enumerate(characters)} #stoi
decode0 = {i:ch for i,ch in enumerate(characters)} #itos
encode = lambda s: [encode0[c] for c in s]
decode = lambda l: ''.join([decode0[i] for i in l])

dataset = torch.tensor(encode(text), dtype=torch.long)#data

with open("milestone1.txt", "w") as f:
    f.write("\nFirst 100 encoded characters in the dataset:\n")
    f.write(str(dataset[:100].numpy().tolist()))

#MILESTONE 2: BASIC BIGRAM LANGUAGE MODEL

#Parameters
max_iters = 3000
eval_interval = 300
learning_rate = 1e-2
device = 'cuda' if torch.cuda.is_available() else 'cpu'
eval_iters = 200

with open ('Ghostship.txt', 'r', encoding = 'utf-8') as f:
    text = f.read()

characters = sorted(list(set(text))) #
num_characters = len(characters) #

#Encode and decode
encode0 = {ch:i for i,ch in enumerate(characters)} #
decode0 = {i:ch for i,ch in enumerate(characters)} #
encode = lambda s: [encode0[c] for c in s]
decode = lambda l: ''.join([decode0[i] for i in l])

#Encode dataset and store it into a torch
dataset = torch.tensor(encode(text), dtype=torch.long) #
#Training and validation sets
n = int(0.9*len(dataset))
training_data = dataset[:n] #
validation_data = dataset[n:] #

#Data loading
def get_batch(split):
    dataset = training_data if split == 'train' else validation_data
    ix = torch.randint(len(dataset) - block_size, (batch_size,))
    x = torch.stack([dataset[i:i+block_size] for i in ix])
    y = torch.stack([dataset[i+1:i+block_size+1] for i in ix])
    x, y = x.to(device), y.to(device)
    return x, y

#Define Bigram Language Model
class BigramLanguageModel(nn.Module):
    def __init__(self, num_characters):
        super().__init__()
        self.token_embedding_table = nn.Embedding(num_characters, num_characters)

    def forward(self, idx, targets=None):
        logits = self.token_embedding_table(idx) 
        loss = None
        if targets is not None:
            B, T, C = logits.shape
            logits = logits.view(B * T, C)
            targets = targets.view(B * T)
            loss = F.cross_entropy(logits, targets)
        return logits, loss

    def generate(self, idx, max_new_tokens):
        for _ in range(max_new_tokens):
            logits, _ = self(idx)
            logits = logits[:, -1, :]
            probs = F.softmax(logits, dim=-1)
            idx_next = torch.multinomial(probs, num_samples=1)
            idx = torch.cat((idx, idx_next), dim=1)
        return idx

#Initialize model and optimizer
model = BigramLanguageModel(num_characters).to(device)
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)

# Evaluation function for train and validation loss
@torch.no_grad()
def estimate_loss():
    out = {}
    model.eval()
    for split in ['train', 'val']:
        losses = torch.zeros(eval_iters)
        for k in range(eval_iters):
            X, Y = get_batch(split)
            _, loss = model(X, Y)
            losses[k] = loss.item()
        out[split] = losses.mean()
    model.train()
    return out

#Training loop
for iter in range(max_iters):
    if iter % eval_interval == 0:
        losses = estimate_loss()
        print(f"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")

    xb, yb = get_batch('train')
    _, loss = model(xb, yb)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

# Generate text from the model
context = torch.zeros((1, 1), dtype=torch.long, device=device)
Milestone2_output = decode(model.generate(context, max_new_tokens=300)[0].tolist())

print("\n")
print("Model results")
print(f'Average loss: {loss.item()}')
print(f'First 300 characters generated by model: {Milestone2_output}')

#Save generated text of 300 tokens to a file called milestone2.txt
with open("milestone2.txt", "w") as f:
    f.write(Milestone2_output)
 
print("\n")
print("Generated text saved to milestone2.txt")
